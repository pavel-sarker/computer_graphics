#include<GL\glut.h>
#include <stdlib.h>
#include <math.h>
#include <windows.h>
void init(void)
{
	glClearColor(1.0, 1.0, 1.0, 0.0);
	gluOrtho2D(-10, 10,-10, 10);
}



void circle_kon(int h, int k, int rx,int ry)    //Works
{

    glBegin(GL_POLYGON);
        for(int i=1;i<=360;i++)     //360 kon
        {                //(x=position+radius x(150))    (y=position+radius y(150))                                                                //// y point=sin main point ; x point=cos main point
            glVertex2f(h+rx*cos(3.14159*i/180),k+ry*sin(3.14159*i/180));       //main point + radius
        }                                                                            //3.14159*i/180   convert degree to radian
        glEnd();

    glFlush();

}

void circle_kon_face(int h, int k, int rx,int ry)    //Works
{

    glBegin(GL_POLYGON);
        for(int i=180;i<=360;i++)     //360 kon
        {                //(x=position+radius x(150))    (y=position+radius y(150))                                                                //// y point=sin main point ; x point=cos main point
            glVertex2f(h+rx*cos(3.14159*i/180),k+ry*sin(3.14159*i/180));       //main point + radius
        }                                                                            //3.14159*i/180   convert degree to radian
        glEnd();

    glFlush();

}


void buildHouse(void)
{
      glClear(GL_COLOR_BUFFER_BIT); // Clear the color buffer with current clearing color
	glColor3f(0.0, 0.0, 0.0);
    circle_kon(0, 0, 8, 8);
    glColor3f(1.0, 1.0, 1.0);
    circle_kon(0, 0, 7.99, 7.99);
    glColor3f(0.0, 0.0, 0.0);
    circle_kon(-4.0, 2.50, 1.0, 1.0);
    glColor3f(0.0, 0.0, 0.0);
    circle_kon(4.0, 2.50, 1.0, 1.0);

    glColor3f(0.0, 0.0, 0.0);
    circle_kon_face(0, -1.0, 4.0, 3.0);

    glColor3f(1.0, 1.0, 1.0);
    circle_kon_face(0, -1.0, 3.9, 2.5);



}

int main(int argc, char** argv)
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
	glutInitWindowPosition(400, 100);
	glutInitWindowSize(500, 500);
	glutCreateWindow("House Section OpenGL");
	init();
	glutDisplayFunc(buildHouse);
	glutMainLoop();
}
 sad
#include<GL\glut.h>
#include <stdlib.h>
#include <math.h>
#include <windows.h>
void init(void)
{
	glClearColor(1.0, 1.0, 1.0, 0.0);
	gluOrtho2D(-10, 10,-10, 10);
}



void circle_kon(int h, int k, int rx,int ry)    //Works
{

    glBegin(GL_POLYGON);
        for(int i=1;i<=360;i++)     //360 kon
        {                //(x=position+radius x(150))    (y=position+radius y(150))                                                                //// y point=sin main point ; x point=cos main point
            glVertex2f(h+rx*cos(3.14159*i/180),k+ry*sin(3.14159*i/180));       //main point + radius
        }                                                                            //3.14159*i/180   convert degree to radian
        glEnd();

    glFlush();

}

void circle_kon_face(int h, int k, int rx,int ry)    //Works
{

    glBegin(GL_POLYGON);
        for(int i=0;i<=180;i++)     //360 kon
        {                //(x=position+radius x(150))    (y=position+radius y(150))                                                                //// y point=sin main point ; x point=cos main point
            glVertex2f(h+rx*cos(3.14159*i/180),k+ry*sin(3.14159*i/180));       //main point + radius
        }                                                                            //3.14159*i/180   convert degree to radian
        glEnd();

    glFlush();

}


void buildHouse(void)
{
      glClear(GL_COLOR_BUFFER_BIT); // Clear the color buffer with current clearing color
	glColor3f(0.0, 0.0, 0.0);
    circle_kon(0, 0, 8, 8);
    glColor3f(1.0, 1.0, 1.0);
    circle_kon(0, 0, 7.99, 7.99);
    glColor3f(0.0, 0.0, 0.0);
    circle_kon(-4.0, 2.50, 1.0, 1.0);
    glColor3f(0.0, 0.0, 0.0);
    circle_kon(4.0, 2.50, 1.0, 1.0);

    glColor3f(0.0, 0.0, 0.0);
    circle_kon_face(0, -3.0, 4.0, 3.0);

    glColor3f(1.0, 1.0, 1.0);
    circle_kon_face(0, -3.0, 3.9, 2.5);



}

int main(int argc, char** argv)
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
	glutInitWindowPosition(400, 100);
	glutInitWindowSize(500, 500);
	glutCreateWindow("House Section OpenGL");
	init();
	glutDisplayFunc(buildHouse);
	glutMainLoop();
}

sun
#include<GL\glut.h>
#include <stdlib.h>
#include <math.h>
#include <windows.h>
static GLfloat spin = 0.0;
static float	tx	=  0.2;
static float	ty	=  0.3;

float i;
void init(void)
{
	glClearColor(0.0, 0.0, 0.0, 0.0);
	gluOrtho2D(-10, 10, -10, 10);

}

void circle_kon(int h, int k, int rx,int ry)    //Works
{

    glBegin(GL_POLYGON);
        for(int i=1;i<=360;i++)     //360 kon
        {                //(x=position+radius x(150))    (y=position+radius y(150))                                                                //// y point=sin main point ; x point=cos main point
            glVertex2f(h+rx*cos(3.14159*i/180),k+ry*sin(3.14159*i/180));       //main point + radius
        }                                                                            //3.14159*i/180   convert degree to radian
        glEnd();

    glFlush();

}


void buildHouse(void)
{

        glClear(GL_COLOR_BUFFER_BIT); // Clear the color buffer with current clearing color

        for(i=0;i<=1;i++){
            spin=spin+0.1;
        }


    glutPostRedisplay();

	glColor3f(1.0, 0.0, 0.0);
    circle_kon(0, 0, 3, 3);

       //for generating the quad every time

    glPushMatrix();
    glDisable(GL_TEXTURE_2D);
	glRotatef(spin, 0.0, 0.0, 0.50);

    glColor3f(0.0, 0.0, 1.0);
    circle_kon(-8, 0, 2.5, 2.5);

    glPopMatrix();



}

int main(int argc, char** argv)
{
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
	glutInitWindowPosition(300, 0);
	glutInitWindowSize(700, 700);
	glutCreateWindow("House Section OpenGL");
	init();
	glutDisplayFunc(buildHouse);
	glutMainLoop();
}
6.......................................


                                        #include<windows.h>
#include <GL/glut.h>
#include <math.h>
void init(void)
{
	glClearColor(1.0, 1.0, 1.0, 0.0);	// Set display window colour to white

	glMatrixMode(GL_PROJECTION);		// Set projection parameters
	gluOrtho2D(0.0, 60.0, 0.0, 60.0);
}

void drawShapes(void)
{
	glClear(GL_COLOR_BUFFER_BIT);	// Clear display window

	//Set colour to black
	glColor3f(0.0, 0.0, 0.0);
	//Adjust the point size
	glPointSize(5.0);



	// Draw a couple of points

	//Set colour to green


	glColor3f(0.0, 0.0, 3.0);

	// Draw a filled triangle
	glBegin(GL_POLYGON);
		glVertex2i(0, 0);
		glVertex2i(0, 30);
		glVertex2i(60, 30);
		glVertex2i(60, 0);
	glEnd();

	//Set colour to red
	glColor3f(1.0, 0.0, 0.0);

	// Draw a filled quadrilateral
	glBegin(GL_POLYGON);
		glVertex2i(0, 0);
		glVertex2i(0, 30);
		glVertex2i(30, 0);

	glEnd();
		glColor3f(0.0, 0.0, 0.0);

	// Draw a filled quadrilateral
	glBegin(GL_POLYGON);
		glVertex2i(0, 30);
		glVertex2i(60, 30);
		glVertex2i(30, 0);

	glEnd();
glColor3f(1.0, 0.0, 0.0);

	// Draw a filled quadrilateral
	glBegin(GL_POLYGON);
		glVertex2i(30, 0);
		glVertex2i(60, 30);
		glVertex2i(60, 0);

	glEnd();
	glColor3f(0.0, 0.0, 1.0);

	// Draw a filled quadrilateral
	glBegin(GL_POLYGON);
		glVertex2i(13, 17);
		glVertex2i(47, 17);
		glVertex2i(40, 10);
		glVertex2i(20, 10);

	glEnd();
	glColor3f(0.0, 0.0, 0.0);

	// Draw a filled quadrilateral
	glBegin(GL_POLYGON);
		glVertex2i(0, 30);
		glVertex2i(60, 30);
		glVertex2i(47, 17);
		glVertex2i(13, 17);

	glEnd();
		glColor3f(1.0, 1.0, 1.0);

	// Draw a filled quadrilateral
	glBegin(GL_POLYGON);
		glVertex2i(20, 10);
		glVertex2i(40, 10);
		glVertex2i(30, 0);

	glEnd();


	glColor3f(1.0, 1.0, 0.0);

	// Draw a filled quadrilateral
	glBegin(GL_POLYGON);

		glVertex2i(35, 17);
		glVertex2i(41, 17);
		glVertex2i(33.75,19.75);

		glVertex2i(38,22.75);
		glVertex2i(33,19.25);

		glVertex2i(35.25,25.75);
		glVertex2i(30,19.25);


		glVertex2i(31,26.25);
		glVertex2i(29.25,21.25);


		glVertex2i(25,17);
		glVertex2i(19,17);
        glVertex2i(25.25,18.95);

		glVertex2i(23.75,22.75);
		glVertex2i(27.25,19.25);

		glVertex2i(27,25.75);
		glVertex2i(29.25,19.25);





	glEnd();

	glColor3f(1.0, 1.0, 0.0);
	glBegin(GL_POLYGON);
	for(int i=0;i<180;i++)
	{
	  float theta=i*3.142/180;
	  glVertex2f(30.60+5.40*cos(theta),17+5.40*sin(theta));  // here (250,250) is the center and 150 is the radius
	}
	glEnd();

	glFlush();	// Process all OpenGL routines
}

int main(int argc, char* argv[])
{
	glutInit(&argc, argv);						// Initalise GLUT
	glutInitDisplayMode(GLUT_SINGLE|GLUT_RGB);	// Set display mode

	glutInitWindowPosition(50, 100);				// Set window position
	glutInitWindowSize(400, 300);					// Set window size
	glutCreateWindow("An Example OpenGL Program");	// Create display window

	init();							// Execute initialisation procedure
	glutDisplayFunc(drawShapes);		// Send graphics to display window
	glutMainLoop();					// Display everything and wait#include<windows.h>
#include <GL/glut.h>
#include <math.h>

void init(void)
{
	glClearColor(0.0, 0.0, 0.0, 0.1);	

	return 0;
}


2............................................

/


.....................................
6...

#include<windows.h>
#include <GL/glut.h>
#include <math.h>
void init(void)
{
	glClearColor(1.0, 1.0, 1.0, 0.0);	// Set display window colour to white

	glMatrixMode(GL_PROJECTION);		// Set projection parameters
	gluOrtho2D(0.0, 60.0, 0.0, 60.0);
}

void drawShapes(void)
{
	glClear(GL_COLOR_BUFFER_BIT);	// Clear display window

	//Set colour to black
	glColor3f(0.0, 0.0, 0.0);
	//Adjust the point size
	glPointSize(5.0);



	// Draw a couple of points

	//Set colour to green


	glColor3f(0.0, 0.0, 3.0);

	// Draw a filled triangle
	glBegin(GL_POLYGON);
		glVertex2i(0, 0);
		glVertex2i(0, 30);
		glVertex2i(60, 30);
		glVertex2i(60, 0);
	glEnd();

	//Set colour to red
	glColor3f(1.0, 0.0, 0.0);

	// Draw a filled quadrilateral
	glBegin(GL_POLYGON);
		glVertex2i(0, 0);
		glVertex2i(0, 30);
		glVertex2i(30, 0);

	glEnd();
		glColor3f(0.0, 0.0, 0.0);

	// Draw a filled quadrilateral
	glBegin(GL_POLYGON);
		glVertex2i(0, 30);
		glVertex2i(60, 30);
		glVertex2i(30, 0);

	glEnd();
glColor3f(1.0, 0.0, 0.0);

	// Draw a filled quadrilateral
	glBegin(GL_POLYGON);
		glVertex2i(30, 0);
		glVertex2i(60, 30);
		glVertex2i(60, 0);

	glEnd();
	glColor3f(0.0, 0.0, 1.0);

	// Draw a filled quadrilateral
	glBegin(GL_POLYGON);
		glVertex2i(13, 17);
		glVertex2i(47, 17);
		glVertex2i(40, 10);
		glVertex2i(20, 10);

	glEnd();
	glColor3f(0.0, 0.0, 0.0);

	// Draw a filled quadrilateral
	glBegin(GL_POLYGON);
		glVertex2i(0, 30);
		glVertex2i(60, 30);
		glVertex2i(47, 17);
		glVertex2i(13, 17);

	glEnd();
		glColor3f(1.0, 1.0, 1.0);

	// Draw a filled quadrilateral
	glBegin(GL_POLYGON);
		glVertex2i(20, 10);
		glVertex2i(40, 10);
		glVertex2i(30, 0);

	glEnd();


	glColor3f(0.0, 1.0, 1.0);

	// Draw a filled quadrilateral
	glBegin(GL_POLYGON);

		glVertex2i(35, 17);
		glVertex2i(41, 17);
		glVertex2i(33.75,19.75);

		glVertex2i(38,22.75);
		glVertex2i(33,19.25);

		glVertex2i(35.25,25.75);
		glVertex2i(30,19.25);


		glVertex2i(31,26.25);
		glVertex2i(29.25,21.25);


		glVertex2i(25,17);
		glVertex2i(19,17);
        glVertex2i(25.25,18.95);

		glVertex2i(23.75,22.75);
		glVertex2i(27.25,19.25);

		glVertex2i(27,25.75);
		glVertex2i(29.25,19.25);





	glEnd();

	glColor3f(1.0, 1.0, 1.0);
	glBegin(GL_POLYGON);
	for(int i=0;i<180;i++)
	{
	  float theta=i*3.142/180;
	  glVertex2f(30.60+5.40*cos(theta),17+5.40*sin(theta));  // here (250,250) is the center and 150 is the radius
	}
	glEnd();

	glFlush();	// Process all OpenGL routines
}

int main(int argc, char* argv[])
{
	glutInit(&argc, argv);						// Initalise GLUT
	glutInitDisplayMode(GLUT_SINGLE|GLUT_RGB);	// Set display mode

	glutInitWindowPosition(50, 100);				// Set window position
	glutInitWindowSize(400, 300);					// Set window size
	glutCreateWindow("An Example OpenGL Program");	// Create display window

	init();							// Execute initialisation procedure
	glutDisplayFunc(drawShapes);		// Send graphics to display window
	glutMainLoop();					// Display everything and wait

	return 0;
}



.................................................


#include <GL/gl.h>
#include <GL/glut.h>
#include <math.h>
void init(void)
{
    glClearColor(0.0,0.0, 0.0, 0.0);
    glMatrixMode(GL_PROJECTION);
    gluOrtho2D(0.0, 1500.0, 0.0, 1500.0);
}
void drawShapes(void)
{
    float theta;
    int i,x=500,y=475;
    glClear(GL_COLOR_BUFFER_BIT);

    glBegin(GL_POLYGON);
    glColor3f(0.0, 0.0, 1.0);
    glVertex2f(100,700);
    glVertex2f(800,700);
    glVertex2f(800,300);
    glVertex2f(100,300);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(0.0, 0.0, 1.0);
    glVertex2f(200,700);
    glVertex2f(800,700);
    glVertex2f(800,300);
    glVertex2f(200,300);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(1.0, 1.0, 1.0);
    for(i=0; i<360; i++)
    {
        theta=i*3.142/180;
        glVertex2f(500+150*cos(theta),500+150*sin(theta));
    }
    glEnd();
    glBegin(GL_POLYGON);
    glColor3f(0.0, 0.0, 1.0);
    for(i=0; i<360; i++)
    {
        theta=i*3.142/180;
        glVertex2f(550+150*cos(theta),500+150*sin(theta));
    }
    glEnd();
    glColor3f(1.0, 1.0, 1.0);
    glBegin(GL_POLYGON);
    glVertex2i(x,y);
    glVertex2i(x+30,y-70);
    glVertex2i(x+50, y);
    glVertex2i(x+110, y);
    glVertex2i(x+60, y+40);
    glVertex2i(x+80, y+110);
    glVertex2i(x+20, y+70);
    glVertex2i(x-30, y+110);
    glVertex2i(x-10, y+40);
    glVertex2i(x-60, y);
    glEnd();

      glBegin(GL_POLYGON);
    glColor3f(1.0, 0.0, 0.0);

    glVertex2f(800,700);
    glVertex2f(1100,700);
    glVertex2f(1100,650);
     glVertex2f(800,650);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(1.0, 1.0, 1.0);

    glVertex2f(800,650);
    glVertex2f(1100,650);
    glVertex2f(1100,600);
     glVertex2f(800,600);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(1.0, 0.0, 0.0);

    glVertex2f(800,600);
    glVertex2f(1100,600);
    glVertex2f(1100,550);
     glVertex2f(800,550);
    glEnd();

     glBegin(GL_POLYGON);
    glColor3f(1.0, 1.0, 1.0);

    glVertex2f(800,550);
    glVertex2f(1100,550);
    glVertex2f(1100,500);
     glVertex2f(800,500);
    glEnd();

        glBegin(GL_POLYGON);
    glColor3f(1.0, 0.0, 0.0);

    glVertex2f(800,500);
    glVertex2f(1100,500);
    glVertex2f(1100,450);
     glVertex2f(800,450);
    glEnd();

        glBegin(GL_POLYGON);
    glColor3f(1.0, 1.0, 1.0);

    glVertex2f(800,450);
    glVertex2f(1100,450);
    glVertex2f(1100,400);
     glVertex2f(800,400);
    glEnd();
        glBegin(GL_POLYGON);
    glColor3f(1.0, 0.0, 0.0);

    glVertex2f(800,400);
    glVertex2f(1100,400);
    glVertex2f(1100,350);
     glVertex2f(800,350);
    glEnd();

         glBegin(GL_POLYGON);
    glColor3f(1.0, 1.0, 1.0);

    glVertex2f(800,350);
    glVertex2f(1100,350);
    glVertex2f(1100,300);
     glVertex2f(800,300);
    glEnd();

           glBegin(GL_POLYGON);
    glColor3f(1.0, 0.0, 0.0);

    glVertex2f(100,300);
    glVertex2f(1100,300);
    glVertex2f(1100,250);
     glVertex2f(100,250);
    glEnd();

        glBegin(GL_POLYGON);
    glColor3f(1.0, 1.0, 1.0);

    glVertex2f(100,250);
    glVertex2f(1100,250);
    glVertex2f(1100,200);
     glVertex2f(100,200);
    glEnd();
             glBegin(GL_POLYGON);
    glColor3f(1.0, 0.0, 0.0);

    glVertex2f(100,200);
    glVertex2f(1100,200);
    glVertex2f(1100,150);
     glVertex2f(100,150);
    glEnd();

       glBegin(GL_POLYGON);
    glColor3f(1.0, 1.0, 1.0);

    glVertex2f(100,150);
    glVertex2f(1100,150);
    glVertex2f(1100,100);
     glVertex2f(100,100);
    glEnd();

             glBegin(GL_POLYGON);
    glColor3f(1.0, 0.0, 0.0);

    glVertex2f(100,100);
    glVertex2f(1100,100);
    glVertex2f(1100,50);
     glVertex2f(100,50);
    glEnd();



    glFlush();
}
int main(int argc, char* argv[])
{
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE|GLUT_RGB);
    glutInitWindowPosition(100, 100);
    glutInitWindowSize(500, 500);
    glutCreateWindow("Monisha Sarker");
    init();
    glutDisplayFunc(drawShapes);

  glutMainLoop();
    return 0;
}





=======================================================


#include<windows.h>
#include <GL/glut.h>
#include <math.h>

void init(void)
{
    glClearColor(1.0,1.0, 1.0, 1.0);
    glMatrixMode(GL_PROJECTION);
    gluOrtho2D(0.0, 1000.0, 0.0, 1000.0);
}
void drawShapes(void)
{
    float theta;
    int i,x=500,y=500;
    glClear(GL_COLOR_BUFFER_BIT);

    glBegin(GL_POLYGON);
    glColor3f(0.0, 1.0, 1.0);
    glVertex2f(50,650);
    glVertex2f(200,600);
    glVertex2f(150,550);
    glVertex2f(150,500);
    glEnd();


    glBegin(GL_POLYGON);
    glColor3f(0.0, 1.0, 1.0);
    glVertex2f(200,550);
    glVertex2f(400,700);
    glVertex2f(290,510);
    glVertex2f(300,310);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(0.0, 1.0, 1.0);
    glVertex2f(90,560);
    glVertex2f(110,510);
    glVertex2f(110,330);
    glVertex2f(80,330);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(0.0, 1.0, 1.0);
    glVertex2f(140,420);
    glVertex2f(130,490);
    glVertex2f(210,320);
    glVertex2f(190,320);
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(0.0, 1.0, 1.0);
    for(i=180; i<360; i++)
    {
        theta=i*3.142/180;
        glVertex2f(150+130*cos(theta),270+130*sin(theta));
    }
    glEnd();

    glBegin(GL_POLYGON);
    glColor3f(0.0, 1.0, 1.0);
    glVertex2f(320,350);
    glVertex2f(335,320);
    glVertex2f(395,415);
    glVertex2f(390,490);
    glEnd();

     glBegin(GL_POLYGON);
    glColor3f(0.0, 1.0, 1.0);
    glVertex2f(395,510);
    glVertex2f(390,590);
    glVertex2f(490,320);
    glVertex2f(475,320);
    glEnd();


     glBegin(GL_POLYGON);
    glColor3f(0.0, 1.0, 1.0);
    for(i=180; i<360; i++)
    {
        theta=i*3.142/180;
        glVertex2f(450+130*cos(theta),270+130*sin(theta));
    }
    glEnd();



    glFlush();
}
int main(int argc, char* argv[])
{
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE|GLUT_RGB);
    glutInitWindowPosition(100, 100);
    glutInitWindowSize(500, 500);
    glutCreateWindow("Monisha Sarker");
    init();
    glutDisplayFunc(drawShapes);
    glutMainLoop();
    return 0;
}





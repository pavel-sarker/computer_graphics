#include<windows.h>
#include <GL/glut.h>
#include <math.h>

void init(void)
{
	glClearColor(0.0, 0.0, 0.0, 0.1);	// Set display window colour to white

	glMatrixMode(GL_PROJECTION);		// Set projection parameters
	gluOrtho2D(0.0, 500.0, 0.0, 500.0);
}

void display()
{
    float theta;
    int i;
	glClear(GL_COLOR_BUFFER_BIT);	// Clear display window


	glColor3f(0.0, 1.0, 0.0);
	glBegin(GL_POLYGON);
	glVertex2d(0,0);
	glVertex2d(480,0);
	glVertex2d(480,480);
	glVertex2d(0,480);
	glEnd();



	//Set colour to red
	glColor3f(1.0, 0.0, 0.0);
	glBegin(GL_POLYGON);

	for(i=0;i<360;i++)
	{
	  theta=i*3.142/180;



	  glVertex2f(250+150*cos(theta),250+150*sin(theta));  // here (250,250) is the center and 150 is the radius
	}

	glEnd();



	glColor3f(0.0, 1.0, 0.0);
	glBegin(GL_POLYGON);

	for(i=0;i<360;i++)
	{
	  theta=i*3.142/180;



	  glVertex2f(280+120*cos(theta),280+120*sin(theta));  // here (250,250) is the center and 150 is the radius
	}

	glEnd();


	glFlush();
	}

int main(int argc, char* argv[])
{
	glutInit(&argc, argv);						// Initalise GLUT
	glutInitDisplayMode(GLUT_SINGLE|GLUT_RGB);	// Set display mode

	glutInitWindowPosition(100, 100);				// Set window position
	glutInitWindowSize(350, 350);					// Set window size
	glutCreateWindow("An Example OpenGL Program");	// Create display window

	init();							// Execute initialisation procedure
	glutDisplayFunc(display);		// Send graphics to display window
	glutMainLoop();					// Display everything and wait

	return 0;
}


======================================================================================================

#include<windows.h>
#include <GL/glut.h>
#include <math.h>

void init(void)
{
	glClearColor(0.0, 0.0, 0.0, 0.1);	// Set display window colour to white

	glMatrixMode(GL_PROJECTION);		// Set projection parameters
	gluOrtho2D(0.0, 20.0, 0.0, 20.0);
}

void display()
{
    float theta;
    int i;
	glClear(GL_COLOR_BUFFER_BIT);	// Clear display window


	//glColor3f(0.0, 1.0, 0.0);
	//glBegin(GL_POLYGON);
	//glVertex2d(0,0);
	//glVertex2d(480,0);
	//glVertex2d(480,480);
	//glVertex2d(0,480);
	//glEnd();



	//Set colour to red




	glColor3f(0.0, 1.0, 0.0);
	glBegin(GL_POLYGON);

	for(i=0;i<360;i++)
	{
	  theta=i*3.142/180;



	  glVertex2f(10+7*cos(theta),10+7*sin(theta));  // here (250,250) is the center and 150 is the radius
	}

	glEnd();


	glColor3f(1.0, 1.0, 1.0);
	glBegin(GL_POLYGON);

	for(i=0;i<360;i++)
	{
	  theta=i*3.142/180;



	  glVertex2f(7+2*cos(theta),12+2*sin(theta));  // here (250,250) is the center and 150 is the radius
	}

	glEnd();


	glColor3f(1.0, 1.0, 1.0);
	glBegin(GL_POLYGON);

	for(i=0;i<360;i++)
	{
	  theta=i*3.142/180;



	  glVertex2f(13+2*cos(theta),12+2*sin(theta));  // here (250,250) is the center and 150 is the radius
	}

	glEnd();

	glColor3f(0.0, 0.0, 0.0);
	glBegin(GL_POLYGON);

	for(i=0;i<360;i++)
	{
	  theta=i*3.142/180;



	  glVertex2f(13.5+1*cos(theta),12.5+1*sin(theta));  // here (250,250) is the center and 150 is the radius
	}

	glEnd();


	glColor3f(0.0, 0.0, 0.0);
	glBegin(GL_POLYGON);

	for(i=0;i<360;i++)
	{
	  theta=i*3.142/180;



	  glVertex2f(6.5+1*cos(theta),12.5+1*sin(theta));  // here (250,250) is the center and 150 is the radius
	}

	glEnd();


	glColor3f(1.0, 1.0, 1.0);
	glBegin(GL_POLYGON);

	for(i=0;i<360;i++)
	{
	  theta=i*3.142/180;



	  glVertex2f(13.75+0.5*cos(theta),12.75+0.5*sin(theta));  // here (250,250) is the center and 150 is the radius
	}

	glEnd();


	glColor3f(1.0, 1.0, 1.0);
	glBegin(GL_POLYGON);

	for(i=0;i<360;i++)
	{
	  theta=i*3.142/180;



	  glVertex2f(6.75+0.5*cos(theta),12.75+0.5*sin(theta));  // here (250,250) is the center and 150 is the radius
	}

	glEnd();



	glColor3f(0.0, 0.0, 0.0);
	glBegin(GL_POLYGON);

	for(i=0;i<180;i++)
	{
	  theta=i*3.142/180;



	  glVertex2f(10+3*cos(theta),6+3*sin(theta));  // here (250,250) is the center and 150 is the radius
	}

	glEnd();

	glColor3f(0.0, 1.0, 0.0);
	glBegin(GL_POLYGON);

	for(i=0;i<180;i++)
	{
	  theta=i*3.142/180;



	  glVertex2f(10+3*cos(theta),5+3*sin(theta));  // here (250,250) is the center and 150 is the radius
	}

	glEnd();


	glColor3f(0.0, 0.0, 0.0);
	glBegin(GL_POLYGON);
	glVertex2d(9,14.25);
	glVertex2d(8,15.25);
	glVertex2d(4.5,14.25);


	glEnd();


	glColor3f(0.0, 0.0, 0.0);
	glBegin(GL_POLYGON);
	glVertex2d(12,14.25);
	glVertex2d(13,15.25);
	glVertex2d(16,14);


	glEnd();



	glFlush();
	}

int main(int argc, char* argv[])
{
	glutInit(&argc, argv);						// Initalise GLUT
	glutInitDisplayMode(GLUT_SINGLE|GLUT_RGB);	// Set display mode

	glutInitWindowPosition(100, 100);				// Set window position
	glutInitWindowSize(350, 350);					// Set window size
	glutCreateWindow("An Example OpenGL Program");	// Create display window

	init();							// Execute initialisation procedure
	glutDisplayFunc(display);		// Send graphics to display window
	glutMainLoop();					// Display everything and wait

	return 0;
}


============================================================================================================
#include<windows.h>
#include <GL/glut.h>
#include <math.h>
void init(void)
{
	glClearColor(1.0, 1.0, 1.0, 0.0);	// Set display window colour to white

	glMatrixMode(GL_PROJECTION);		// Set projection parameters
	gluOrtho2D(0.0, 60.0, 0.0, 60.0);
}

void drawShapes(void)
{
	glClear(GL_COLOR_BUFFER_BIT);	// Clear display window

	//Set colour to black
	glColor3f(0.0, 0.0, 0.0);
	//Adjust the point size
	glPointSize(5.0);



	// Draw a couple of points

	//Set colour to green


	glColor3f(0.0, 0.0, 3.0);

	// Draw a filled triangle
	glBegin(GL_POLYGON);
		glVertex2i(0, 0);
		glVertex2i(0, 30);
		glVertex2i(60, 30);
		glVertex2i(60, 0);
	glEnd();

	//Set colour to red
	glColor3f(1.0, 0.0, 0.0);

	// Draw a filled quadrilateral
	glBegin(GL_POLYGON);
		glVertex2i(0, 0);
		glVertex2i(0, 30);
		glVertex2i(30, 0);

	glEnd();
		glColor3f(0.0, 0.0, 0.0);

	// Draw a filled quadrilateral
	glBegin(GL_POLYGON);
		glVertex2i(0, 30);
		glVertex2i(60, 30);
		glVertex2i(30, 0);

	glEnd();
glColor3f(1.0, 0.0, 0.0);

	// Draw a filled quadrilateral
	glBegin(GL_POLYGON);
		glVertex2i(30, 0);
		glVertex2i(60, 30);
		glVertex2i(60, 0);

	glEnd();
	glColor3f(0.0, 0.0, 1.0);

	// Draw a filled quadrilateral
	glBegin(GL_POLYGON);
		glVertex2i(13, 17);
		glVertex2i(47, 17);
		glVertex2i(40, 10);
		glVertex2i(20, 10);

	glEnd();
	glColor3f(0.0, 0.0, 0.0);

	// Draw a filled quadrilateral
	glBegin(GL_POLYGON);
		glVertex2i(0, 30);
		glVertex2i(60, 30);
		glVertex2i(47, 17);
		glVertex2i(13, 17);

	glEnd();
		glColor3f(1.0, 1.0, 1.0);

	// Draw a filled quadrilateral
	glBegin(GL_POLYGON);
		glVertex2i(20, 10);
		glVertex2i(40, 10);
		glVertex2i(30, 0);

	glEnd();


	glColor3f(1.0, 1.0, 0.0);

	// Draw a filled quadrilateral
	glBegin(GL_POLYGON);

		glVertex2i(35, 17);
		glVertex2i(41, 17);
		glVertex2i(33.75,19.75);

		glVertex2i(38,22.75);
		glVertex2i(33,19.25);

		glVertex2i(35.25,25.75);
		glVertex2i(30,19.25);


		glVertex2i(31,26.25);
		glVertex2i(29.25,21.25);


		glVertex2i(25,17);
		glVertex2i(19,17);
        glVertex2i(25.25,18.95);

		glVertex2i(23.75,22.75);
		glVertex2i(27.25,19.25);

		glVertex2i(27,25.75);
		glVertex2i(29.25,19.25);





	glEnd();

	glColor3f(1.0, 1.0, 0.0);
	glBegin(GL_POLYGON);
	for(int i=0;i<180;i++)
	{
	  float theta=i*3.142/180;
	  glVertex2f(30.60+5.40*cos(theta),17+5.40*sin(theta));  // here (250,250) is the center and 150 is the radius
	}
	glEnd();

	glFlush();	// Process all OpenGL routines
}

int main(int argc, char* argv[])
{
	glutInit(&argc, argv);						// Initalise GLUT
	glutInitDisplayMode(GLUT_SINGLE|GLUT_RGB);	// Set display mode

	glutInitWindowPosition(50, 100);				// Set window position
	glutInitWindowSize(400, 300);					// Set window size
	glutCreateWindow("An Example OpenGL Program");	// Create display window

	init();							// Execute initialisation procedure
	glutDisplayFunc(drawShapes);		// Send graphics to display window
	glutMainLoop();					// Display everything and wait

	return 0;
}

===============================================================================================



